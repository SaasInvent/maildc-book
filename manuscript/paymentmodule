#Online payment module

MailDC is a paying service, although we strive to make it as less expensive as possible.

A fee of *9€45 per year* seems reasonable. The marketing department would have put it this way : *less than one euro per month*!

The payment provider is ["PayPlug"](https://www.payplug.fr/en/). Unfortunately there is no node module available for that platform.

So we're going to write our own!

Writing a npm module
--------------------

To get started, I created a new repository on my Github account and then cloned it locally.

    git clone https://github.com/WorkingBox/payplug.git

By the way, working-box is another of my projects worth checking out!


Configure npm
-------------

Let's get started by configuring npm a little bit. Go ahead and enter these commands in a terminal, using your own information. This way, when we run some npm commands later, it will already know who we are and will be able to autocomplete some information for us.

    npm set init.author.name "WorkingBox"
    npm set init.author.email "contact@working-box.com"
    npm set init.author.url "http://www.working-box.com"

This next command will prompt you for an email and password, create or verify a user in the npm registry, and save the credentials to the *~/.npmrc* file.

    npm adduser

Next, we'll surely want to write some tests. I prefer to use the Mocha and Chai frameworks, but you can use whatever you like. These can be installed and persisted to the package.json file with the following commands. Note that they are added to the '*devDependencies*' section, as they are only required during development and not at runtime.

    npm install mocha --save-dev
    npm install chai --save-dev
    npm install gulp --save-dev
    npm install gulp-coffee --save-dev
    npm install gulp-util --save-dev
    npm install chai-as-promised --save-dev
    npm install sinon-chai --save-dev

The other modules can be installed as follows:

    npm install ramda --save
    npm install crypto --save
    npm install q --save
    npm install node-uuid --save
    npm install querystring --save
	npm install stream --save
	npm install iconv-lite --save
    npm install fs --save
	
	




The above commands will also create a node_modules folder in your project directory containing those dependencies. Following best practices, we'll want to keep the node_modules folder out of the git repository. We can do that by adding a *.gitignore* file to our project root, with the following contents.

    node_modules

Continuing on, let's create a test directory to hold our tests. As our primary module file is called index.js, within the test directory I will create a file by the same name - a simple convention. Mocha will by default run all tests in this directory. Our test should look something like the following. Note that I am using the should syntax provided by the Chai framework. Also note the use of require to pull in our module code into the test.

Folder organization
-------------------

We will write our package in coffeescript, but only publish it in javascript. 
I would suggest the following folder organization:

 - src : coffeescript
 - lib : compiled javascript
 - test : mocha/chai tests

As our primary module file is called *index.js*, within the test directory I will create a file by the same name - a simple convention. Mocha will by default run all tests in this directory. Our test should look something like the following. Note that I am using the should syntax provided by the Chai framework. Also note the use of require to pull in our module code into the test.

    should = require('chai').should()
    payplug = require('../index')

    describe('#escape', ->
      it('converts & into &amp;' ,  ->
        escape('&').should.equal('&amp;')
  

But how do we actually run the tests? Following the Mocha docs and to keep things simple, we'll add a Makefile to the root of the project with an associated test target. Note that most projects seem to be using Grunt rather than Make these days. Regardless, our file should contain the following. *Note that the indentation after the test target must be a tab and not spaces.*

    test:
        ./node_modules/.bin/mocha --reporter spec
    
     .PHONY: test

 
After doing so, we can then execute the tests by entering following command.

    make test

To improve upon this, we can now tell npm how to run our tests by simply adjusting the scripts:test section of our package.json file.

    "scripts": {
      "test": "make test"
    },

After doing so, we can then run the following command to run our tests.

    npm test

The output should look something like the following.


Gulp file
---------

In order to compile the different coffeescript files we'll be using gulp.



Module development
------------------

The payplug module is inspired by the [paybox](https://github.com/Ideolys/node-paybox) module!

To access your TEST (Sandbox) account parameters, you need to access the following URL (more information in the TEST (Sandbox) Mode section):


Test data for Payplug

You should use the following credit card credentials :

    Number: 5017670000001800
    Expiration: a date in the future
    CVV: 400

All payments will terminate with a success message.

To access your TEST (Sandbox) account parameters, you need to access the following URL (more information in the TEST (Sandbox) Mode section):

https://www.payplug.fr/portal/test/ecommerce/autoconfig
We advise you to access this URL directly from your server and save the parameters in a file or in a database. The JSON object contains the following fields:

 - `amount_min` : 	Minimum amount allowed per transaction (EUR).
 - `amount_max` : 	Maximum amount allowed per transaction (EUR).
 - `currencies` : 	Currencies 
 - `url` : 	The base URL to use in constructing the payment with the data and signature fields (`base_url` parameters in the “creating a payment” section).
 - `yourPrivateKey`	: Your RSA key to be used to sign transaction data. Without this signature, PayPlug will refuse the payment request.
 - `payplugPublicKey`	: The RSA key that allows you to verify notifications that the payment notifications (IPN) sent to your server was sent by PayPlug and was not modified by a third party.
 
Remark: you must save *yourPrivateKey* and *payplugPublicKey* in the PEM format (base64 representation of a RSA private key). 


Creating a payment
------------------

In order to accept a payment, you must redirect your customer to a URL of the form:

    base_url?data=data&sign=signature

    <?php
    $url = $base_url . "?data=".$data . "&sign=".$signature;
    header("Location: $url");
    exit();

 

 - The `base_url` parameter

This is the url field retrieved and saved during the configuration step.


 - The `data` parameter

The data parameter contains the payment data you wish to send to PayPlug. This data must be encoded in base64 then as a URL.


    <?php
    $params = array(
              'amount' => 999,
              'currency' => 'EUR',
              'ipn_url' => 'http://www.example.org/ipn.php',
              'email' => 'john.doe@client.com',
              'first_name' => 'John',
              'last_name' => 'Doe'
              );
    $url_params = http_build_query($params);
    $data = urlencode(base64_encode($url_params));

The fields amount, currency and ipn_url are required. Note that if any of the fields email, first_name or last_name is left blank, the customer will be required to enter all three fields on the payment page.

 - The `signature` parameter

The signature parameter is a SHA1 + RSA signature calculated from the data field value (not encoded in base64, i.e. $url_params in the following example).

This signature must be calculated using OpenSSL with the private key you saved during the setup step. The signature must be encoded in base64 and then as a URL.

Example in PHP

    <?php
    /* $pvkey = yourPrivateKey saved during the configuration phase */
    $privatekey = openssl_pkey_get_private($pvkey);
    openssl_sign($url_params, $signature, $privatekey, OPENSSL_ALGO_SHA1);
    $signature = urlencode(base64_encode($signature));

